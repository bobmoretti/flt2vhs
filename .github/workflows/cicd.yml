on: [pull_request, push, create]
jobs:
  format:
    if: github.event_name == 'pull_request'
    name: Apply fmt
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: rustfmt
            override: true
      - uses: mbrobbel/rustfmt-check@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  clippy_check:
    if: github.event_name == 'pull_request'
    name: Clippy check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  # build-cross:
  #   name: Builds via cross-compiling
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v2

  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Install mingw
  #       run: sudo apt-get install mingw-w64

  #     - name: Build generic win32 binary
  #       env:
  #         RUSTFLAGS: -C target-cpu=generic
  #       run: |
  #         rustup target add x86_64-pc-windows-gnu
  #         cargo build --target x86_64-pc-windows-gnu

  build-windows:
    name: Builds natively on windows
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build generic win32 binary
        env:
          RUSTFLAGS: -C target-cpu=generic
        run: |
          rustup target add x86_64-pc-windows-msvc
          cargo build --target x86_64-pc-windows-msvc
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: MSVC executables
          path: |
            target/x86_64-pc-windows-msvc/debug/*.exe
            target/x86_64-pc-windows-msvc/debug/*.pdb
          if-no-files-found: warn
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get version tag if applicable
        id: release-version
        run: |
          $tag = $env:GITHUB_REF.split("/")[-1].substring(1)
          echo "::set-output name=RELEASE_VERSION::$tag"
        if: startsWith(github.ref, 'refs/tags/')
      - name: Test environment variable
        run: |
          echo "::debug:: New tag version: ${{ steps.release-version.outputs.RELEASE_VERSION }}"
        if: startsWith(github.ref, 'refs/tags/')
      - name: Prepare exe paths
        run: |
          cp target/x86_64-pc-windows-msvc/debug/*.exe ./
      - name: Zip for release
        uses: DuckSoft/create-7z-action@v1.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          pathSource: ./*.exe
          pathTarget: flt2vhs-${{ steps.release-version.outputs.RELEASE_VERSION }}.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          artifacts: "flt2vhs-${{ steps.release-version.outputs.RELEASE_VERSION }}.7z"
          # this will allow a manually-created release/tag to be updated with the new build artifacts
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          name: "Version ${{ steps.release-version.outputs.RELEASE_VERSION }}" 
          tag: v${{ steps.release-version.outputs.RELEASE_VERSION }}


      # - name: Create release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files:
      #       flt2vhs-$RELEASE_VERSION.7z
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # uncomment below to enable debugging!
      # - name: Setup tmate
      #   uses: mxschmitt/action-tmate@v3
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
